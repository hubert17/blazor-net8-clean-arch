@page "/account/login"
@layout Layout.LoginLayout

@using BlazorNet8CleanArch.Infrastructure.Authentication
@using BlazorNet8CleanArch.Infrastructure.Constants
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Authorization

@inject HttpClient HttpClient
@inject NavigationManager NavManager
@inject ISnackbar snackBar

@inject AuthenticationStateProvider AuthStateProvider

@inject ILocalStorageService localStorage

<PageTitle>Gablazor App - Login</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">Sign In</MudText>

<MudText>Don't have an account? <MudLink Href="/register">Sign Up</MudLink></MudText>

<MudTextField T="string" @bind-Value="@Username" Label="E-mail" Variant="Variant.Outlined" Class="my-6"></MudTextField>

<MudPasswordField @bind-Value="@Password" Label="Password" PasswordMode="true" Variant="Variant.Outlined" IconSize="Size.Medium" />

<div Class="d-flex justify-space-between align-center">
    <MudCheckBox T="bool" Label="Remember me?" Color="Color.Primary" Class="ml-n1 my-3"></MudCheckBox>
    <MudLink Href="#">Forgot password?</MudLink>
</div>

<MudLoadingButton FullWidth="true" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" LoadingAdornment="Adornment.Start" @bind-Loading="isSubmitting" OnClick="LoginClicked">Sign In</MudLoadingButton>

@code {
    public record LoginResponse(string Username = null!, string Token = null!, string RefreshToken = null!);
    public record LoginDTO(string Username, string Password);

    string Username = "admin";
    string Password = "admin123";
    bool isSubmitting = false;

    [Parameter]
    [SupplyParameterFromQuery(Name = "ReturnUrl")]
    public string? ReturnUrl { get; set; }

    async Task LoginClicked()
    {
        isSubmitting = true;
        var response = await HttpClient.PostAsJsonAsync($"{StorageConstants.Local.HttpClientAuthBaseAddress}/TOKEN?username={Username}&password={Password}", new LoginDTO(Username, Password));
        if (response.IsSuccessStatusCode)
        {
            var tokenResponse = await response.Content.ReadFromJsonAsync<LoginResponse>();
            await localStorage.SetItemAsStringAsync(StorageConstants.Local.JWTTokenStorageKeyName, tokenResponse!.Token);
            await localStorage.SetItemAsStringAsync("refreshToken", tokenResponse.RefreshToken);
            var customAuthStateProvider = (PersistentAuthenticationStateProvider)AuthStateProvider;
            customAuthStateProvider.UpdateAuthenticationState(tokenResponse!.Token);
            NavManager.NavigateTo(ReturnUrl ?? "/");
        }
        else
        {
            snackBar.Clear();
            snackBar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
            snackBar.Add("Invalid login.", Severity.Error);

            isSubmitting = false;
        }        
    }


}