@inherits LayoutComponentBase

@using BlazorNet8CleanArch.Infrastructure.Constants
@using Blazored.LocalStorage

@inject ILocalStorageService localStorage
@inject HttpClient httpClient

<MyMudThemeProvider />
<MyMudProviders />

<style>
    body {
        background-image: url("@backgroundImageUrl");
        background-size: cover;
        background-color: #263238;
    }
</style>

<MudContainer MaxWidth="MaxWidth.Small" Class="d-flex align-center" Style="height: 100vh;">
    <div class="d-flex flex-column mud-width-full">
        <MudAppBar Color="Color.Primary" Fixed="false">
            <MudText Typo="Typo.h5" Class="ml-n2">Gablazor</MudText>
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Outlined.MoreVert" Color="Color.Inherit" Class="mr-n4" />
        </MudAppBar>
        <MudPaper Elevation="25" Class="pa-8" Width="100%" MaxWidth="600px">
            <MudIcon Icon="@Icons.Custom.Brands.MudBlazor" Size="Size.Large" Style="width:100px; height:100px;" />
            @Body
        </MudPaper>       
    </div>
</MudContainer>

@code {
    protected override async Task OnInitializedAsync()
    {
        await SetBackgroundWithBingWallpapers();
    }

    #region UI:BingWallpapaer
    private record BingPhoto(string url);
    private List<BingPhoto> bingPhotos = null!;
    private string backgroundImageUrl = "";

    private async Task SetBackgroundWithBingWallpapers()
    {
        string? jsonPhotos;

        if (OperatingSystem.IsBrowser())
        {
            jsonPhotos = await localStorage.GetItemAsStringAsync("bingphotos");
            if (!string.IsNullOrEmpty(jsonPhotos))
            {
                bingPhotos = JsonSerializer.Deserialize<List<BingPhoto>>(jsonPhotos)!;
                StorageConstants.Local.BingPhoto = bingPhotos.FirstOrDefault()!.url;                
            }            
        }

        var response = await httpClient.GetAsync("https://api45gabs.azurewebsites.net/api/sample/bingphotos");
        if (response.IsSuccessStatusCode)
        {
            jsonPhotos = await response.Content.ReadAsStringAsync();
            bingPhotos = JsonSerializer.Deserialize<List<BingPhoto>>(jsonPhotos)!;
            StorageConstants.Local.BingPhoto = bingPhotos.FirstOrDefault()!.url;

            if (OperatingSystem.IsBrowser())
                await localStorage.SetItemAsStringAsync("bingphotos", jsonPhotos);
        }
        else
            Console.WriteLine($"Error fetching Bing photos...");    
            
        backgroundImageUrl = $"https://bing.com{StorageConstants.Local.BingPhoto}";
    }
    #endregion
}