@inherits LayoutComponentBase

@using Blazored.LocalStorage

@inject ILocalStorageService localStorage
@inject HttpClient HttpClient

<MyMudThemeProvider />
<MyMudProviders />

<style>
    body {
        background-image: url("@backgroundImageUrl");
        background-size: cover;
        background-color: #263238;
    }
</style>

<MudContainer MaxWidth="MaxWidth.Small" Class="d-flex align-center" Style="height: 100vh;">
    <div class="d-flex flex-column mud-width-full">
        <MudAppBar Color="Color.Primary" Fixed="false">
            <MudText Typo="Typo.h5" Class="ml-n2">Gablazor</MudText>
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Outlined.MoreVert" Color="Color.Inherit" Class="mr-n4" />
        </MudAppBar>
        <MudPaper Elevation="25" Class="pa-8" Width="100%" MaxWidth="600px">
            <MudIcon Icon="@Icons.Custom.Brands.MudBlazor" Size="Size.Large" Style="width:100px; height:100px;" />
            @Body
        </MudPaper>       
    </div>
</MudContainer>

@code {
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await SetBackgroundWithBingWallpapers();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"SetBackgroundWithBingWallpapers(): {ex.Message}");
        }
    }

    #region UI:BingWallpapaer
    private record BingPhoto(string url);
    private List<BingPhoto> bingPhotos = null!;
    private string backgroundImageUrl = "";

    private async Task SetBackgroundWithBingWallpapers()
    {
        var jsonPhotos = await localStorage.GetItemAsStringAsync("bingphotos");
        if (!string.IsNullOrEmpty(jsonPhotos))
        {
            bingPhotos = JsonSerializer.Deserialize<List<BingPhoto>>(jsonPhotos)!;

            var bingImage = bingPhotos?.FirstOrDefault();
            if (bingImage != null)
                backgroundImageUrl = $"https://bing.com{bingImage.url}";
        }

        try
        {
            var response = await HttpClient.GetAsync("https://api45gabs.azurewebsites.net/api/sample/bingphotos");
            if (response.IsSuccessStatusCode)
            {
                jsonPhotos = await response.Content.ReadAsStringAsync();
                bingPhotos = JsonSerializer.Deserialize<List<BingPhoto>>(jsonPhotos)!;
                await localStorage.SetItemAsStringAsync("bingphotos", jsonPhotos);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching Bing photos: {ex.Message}");
        }

    }
    #endregion
}