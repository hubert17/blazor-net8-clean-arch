@inherits LayoutComponentBase

@using BlazorNet8CleanArch.Infrastructure.Authentication
@using BlazorNet8CleanArch.Infrastructure.Constants
@using Microsoft.AspNetCore.Components.Authorization
@using Blazored.LocalStorage
@using System.Text

@inject HttpClient HttpClient
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService localStorage
@inject NavigationManager NavManager

<MyMudThemeProvider />
<MyMudProviders />

<MudLayout>
    <MudAppBar Elevation="4">
        <MudHidden Breakpoint="Breakpoint.SmAndDown">
            <MudIcon Icon="@Icons.Custom.Brands.MudBlazor" Size="Size.Large" />
        </MudHidden>
        <MudHidden Breakpoint="Breakpoint.MdAndUp">
            <MudIconButton Icon="@Icons.Material.Outlined.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        </MudHidden>
        <MudText Typo="Typo.h6" Class="ml-3">Gablazor App</MudText>

        <MudSpacer />        
        <MudMenu EndIcon="@Icons.Filled.KeyboardArrowDown" Label="Support" Color="Color.Inherit" Dense="true" AnchorOrigin="Origin.BottomRight">
            <MudText Typo="Typo.body2" Class="px-4 py-2"><b>Community</b></MudText>
            <MudText Typo="Typo.body2" Class="px-4 py-2"><b>Resources</b></MudText>
            <MudMenuItem Link="https://mudblazor.com/docs/overview" Target="_blank">MudBlazor Documentation</MudMenuItem>
            <MudMenuItem Link="https://mudblazor.com/getting-started/installation" Target="_blank">Quick-Start Guide</MudMenuItem>
        </MudMenu>
        <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Link="https://github.com/hubert17/blazor-net8-clean-arch" Target="_blank" />
        <MudMenu AnchorOrigin="Origin.TopLeft" Dense="true" Class="mt-1 ml-4">
            <ActivatorContent>
                <MudAvatar Size="Size.Medium"> 
                    <MudImage Src="https://avatars.githubusercontent.com/u/7923889?v=4"></MudImage>
                </MudAvatar>
            </ActivatorContent>
            <ChildContent>
                <MudListItem Text="@($"{Username} Account")" Icon="@Icons.Material.Outlined.Person" Href="#" />
                <MudListItem Text="Settings" Icon="@Icons.Material.Filled.Settings" />
                <MudDivider />
                <MudListItem Text="Logout" Icon="@Icons.Material.Outlined.Login" OnClick="@(() => Logout())" />
            </ChildContent>
        </MudMenu>
        
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Variant="@DrawerVariant.Responsive" Elevation="6">
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer Class="mt-6">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }



    async void Logout()
    {
        await ((PersistentAuthenticationStateProvider)AuthStateProvider).MarkUserAsLoggedOut();
        NavManager.NavigateTo("/account/login");
    }

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
    private string Username = "";
    string roles = "";

    protected override async Task OnInitializedAsync()
    {
        if (authenticationState is not null)
        {
            var state = await authenticationState;

            Username = state?.User?.Identity?.Name ?? string.Empty;
            var crole = state?.User?.Claims.Where(c => c.Type == System.Security.Claims.ClaimTypes.Role).ToList();
            roles = string.Join(',', crole!.Select(s => s.Value));
        }
    }
}