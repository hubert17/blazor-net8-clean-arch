@page "/"
@page "/login"
@layout Layout.LoginLayout

@using BlazorNet8CleanArch.Infrastructure.Authentication
@using Microsoft.AspNetCore.Components.Authorization

@inject HttpClient HttpClient
@inject NavigationManager NavManager
@inject ISnackbar snackBar

@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Gablazor App - Login</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">Sign In</MudText>

<MudText>Don't have an account? <MudLink Href="/register">Sign Up</MudLink></MudText>

<MudTextField T="string" @bind-Value="@Username" Label="E-mail" Variant="Variant.Outlined" Class="my-6"></MudTextField>

<MudTextField @bind-Value="@Password" Label="Password" Variant="Variant.Outlined" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="TogglePasswordVisibility" />

<div Class="d-flex justify-space-between align-center">
    <MudCheckBox T="bool" Label="Remember me?" Color="Color.Primary" Class="ml-n1 my-3"></MudCheckBox>
    <MudLink Href="#">Forgot password?</MudLink>
</div>

<MudLoadingButton FullWidth="true" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" @bind-Loading="isSubmitting" LoadingAdornment="_adornment" OnClick="LoginClicked">Sign In</MudLoadingButton>

@code {

    public record LoginResponse(string Username = null!, string Token = null!);
    public record LoginDTO(string Username, string Password);

    string Username = "admin";
    string Password = "admin123";
    bool isSubmitting = false;
    Adornment _adornment = Adornment.Start;

    async Task LoginClicked()
    {
        isSubmitting = true;
        var response = await HttpClient.PostAsJsonAsync($"/TOKEN?username={Username}&password={Password}", new LoginDTO(Username, Password));
        await Task.Delay(5000);
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
            var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
            customAuthStateProvider.UpdateAuthenticationState(result!.Token);
            NavManager.NavigateTo("/home");
        }
        else
        {
            snackBar.Add("Invalid login.", Severity.Error);
            isSubmitting = false;
        }
        
    }

    #region UI:PasswordVisibility
    bool PasswordVisibility;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void TogglePasswordVisibility()
    {
        @if (PasswordVisibility)
        {
            PasswordVisibility = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            PasswordVisibility = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
    #endregion




}