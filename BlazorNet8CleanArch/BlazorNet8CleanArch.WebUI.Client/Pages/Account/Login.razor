@page "/"
@page "/login"
@layout Layout.LoginLayout

@using BlazorNet8CleanArch.Infrastructure.Authentication
@using Microsoft.AspNetCore.Components.Authorization

@inject IJSRuntime JSRuntime
@inject HttpClient HttpClient
@inject NavigationManager NavManager
@inject ISnackbar snackBar

@inject AuthenticationStateProvider AuthStateProvider

<style>
    body { 
        background-image: url("@backgroundImageUrl");
        background-size: cover;
    }
</style>

<PageTitle>Gablazor App - Login</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">Sign In</MudText>

<MudText>Don't have an account? <MudLink Href="/register">Sign Up</MudLink></MudText>

<MudTextField T="string" @bind-Value="@Username" Label="E-mail" Variant="Variant.Outlined" Class="my-6"></MudTextField>

<MudTextField @bind-Value="@Password" Label="Password" Variant="Variant.Outlined" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="TogglePasswordVisibility" />

<div Class="d-flex justify-space-between align-center">
    <MudCheckBox T="bool" Label="Remember me?" Color="Color.Primary" Class="ml-n1 my-3"></MudCheckBox>
    <MudLink Href="/pages/authentication/forgot-password">Forgot password?</MudLink>
</div>


<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="LoginClicked" Size="Size.Large" FullWidth="true">Sign In</MudButton>

@code {

    public record LoginResponse(string Username = null!, string Token = null!);
    public record LoginDTO(string Username, string Password);

    string Username = "admin";
    string Password = "admin123";

    async Task LoginClicked()
    {
        var response = await HttpClient.PostAsJsonAsync($"/TOKEN?username={Username}&password={Password}", new LoginDTO(Username, Password));
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
            var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
            customAuthStateProvider.UpdateAuthenticationState(result!.Token);
            NavManager.NavigateTo("/home");
        }
        else
            snackBar.Add("Invalid login.", Severity.Error);
    }

    protected override async Task OnInitializedAsync()
    {
        await SetBackgroundWithBingWallpapers();
    }

    #region UI:PasswordVisibility
    bool PasswordVisibility;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void TogglePasswordVisibility()
    {
        @if (PasswordVisibility)
        {
            PasswordVisibility = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            PasswordVisibility = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
    #endregion



    #region UI:BingWallpapaer
    private record BingPhoto(string url);
    private List<BingPhoto> bingPhotos = null!;
    private string backgroundImageUrl = "";

    private async Task SetBackgroundWithBingWallpapers()
    {
        try
        {
            var response = await HttpClient.GetAsync("https://api45gabs.azurewebsites.net/api/sample/bingphotos");
            if (response.IsSuccessStatusCode)
            {
                var jsonPhotos = await response.Content.ReadAsStringAsync();
                bingPhotos = JsonSerializer.Deserialize<List<BingPhoto>>(jsonPhotos)!;
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "bingphotos", jsonPhotos);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching Bing photos: {ex.Message}");
        }

        if (bingPhotos == null)
        {
            var jsonPhotos = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "bingphotos");
            if (!string.IsNullOrEmpty(jsonPhotos))
            {
                bingPhotos = JsonSerializer.Deserialize<List<BingPhoto>>(jsonPhotos)!;
            }
        }

        var imageUrl = bingPhotos?.FirstOrDefault()?.url ?? "/th?id=OHR.BurleighHeads_EN-US4425800469_1920x1080.jpg&rf=LaDigue_1920x1080.jpg&pid=hp";
        backgroundImageUrl = $"https://bing.com{imageUrl}";
    }
    #endregion
}