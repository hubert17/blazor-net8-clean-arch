@page "/songlist"
@attribute [Authorize]

@using System.ComponentModel.DataAnnotations

@inject HttpClient HttpClient
@inject ILocalStorageService localStorage
@inject ISnackbar SnackBar
@inject IDialogService DialogService

<MudTable T="SongModel" ServerData="@(new Func<TableState, Task<TableData<SongModel>>>(GetServerData))" Elevation="25" Hover="true" @bind-song="song" @ref="table">
    <ToolBarContent>
        <MudText Typo="Typo.h4" Class="mt-2">Song List</MudText>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" Clearable="true"></MudTextField>
        <MudSpacer />
        <MudFab OnClick="@(()=>CreateNew())" Color="Color.Primary" Class="mt-4 mr-n2" Icon="@Icons.Material.Filled.Add" Size="Size.Large" IconSize="Size.Medium" />
    </ToolBarContent>
    <HeaderContent>
        <MudTh>ID</MudTh>
        <MudTh>Title</MudTh>
        <MudTh>Artist</MudTh>
        <MudTh>Release Year</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Title">@context.Title</MudTd>
        <MudTd DataLabel="Artist">@context.Artist</MudTd>
        <MudTd DataLabel="Year">@context.ReleaseYear</MudTd>
        <MudTd DataLabel="">
            <div class="ma-n4 action-button">
                <MudFab OnClick="@(()=>Edit(@context))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
                <MudFab OnClick="@(()=>Delete(@context))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
            </div>
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>


<MudDialog @bind-IsVisible="addEditDialogVisible" Options="addEditDialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6" Color="Color.Primary">
            <MudIcon Icon="@Icons.Material.Filled.Edit" /> @(song.Id == null ? "Add" : "Edit") Song
        </MudText>
    </TitleContent>
    <DialogContent>      
        <EditForm Model="song">
            <DataAnnotationsValidator />
            <MudTextField @bind-Value="song.Id" Label="Song ID" Variant="Variant.Text" Margin="Margin.Normal" Disabled="true" ></MudTextField>
            <MudTextField @bind-Value="song.Title" Label="Title" Variant="Variant.Text" Margin="Margin.Normal" autoFocus For="@(() => song.Title)"></MudTextField>
            <MudTextField @bind-Value="song.Artist" Label="Artist" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
            <MudTextField @bind-Value="song.ReleaseYear" Label="Release Year" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
            <div class="mud-dialog-actions mt-2 mr-n2">
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@(() => addEditDialogVisible = false)">Cancel</MudButton>
                <MudLoadingButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" 
                    ButtonType="ButtonType.Submit" LoadingAdornment="Adornment.Start" @bind-Loading="isSubmitting" 
                    OnClick="() => Save()" Disabled="@(!context.IsModified() || !context.Validate())">Save
                </MudLoadingButton>
            </div>           
        </EditForm>
    </DialogContent>
</MudDialog>

<MudMessageBox @ref="delMessageBox">
    <MessageContent>
        Do you really want to delete this record? This process cannot be undone.
    </MessageContent>
    <YesButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error">Delete</MudButton>
    </YesButton>
    <CancelButton>
        <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="@(() => delMessageBox.Close() )" Class="mr-2">Cancel</MudButton>
    </CancelButton>
</MudMessageBox>

@code {
    private List<SongModel> pagedData = new();
    private SongModel song = new();
    private MudTable<SongModel> table;
    private int totalItems;
    private string searchString = null!;

    private bool addEditDialogVisible;
    private DialogOptions addEditDialogOptions = new() { FullWidth = true, DisableBackdropClick = true, CloseButton = true, CloseOnEscapeKey = true };

    bool isSubmitting = false;

    MudMessageBox delMessageBox { get; set; }

    /// <summary>
    /// Here we simulate getting the paged, filtered and ordered data from the server
    /// </summary>
    private async Task<TableData<SongModel>> GetServerData(TableState state)
    {       
        var response = await HttpClient.GetFromJsonAsync<SongDTO>($"/api/Song?page={state.Page + 1}&pageSize={state.PageSize}&search={searchString}");

        //songs = response.items;

        pagedData = response!.items; //.Skip(state.Page * state.PageSize).Take(state.PageSize).ToList();
        state.Page = response!.pageNumber;
        state.PageSize = response!.pageSize;
        return new TableData<SongModel>() { TotalItems = response!.totalItemCount, Items = pagedData };
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    private void CreateNew()
    {
        song = new();
        addEditDialogVisible = true;
    }

    private void Edit(SongModel s)
    {
        if (s is not null)
        {
            song = pagedData.Single(x => x.Id == s.Id);
            song = JsonSerializer.Deserialize<SongModel>(JsonSerializer.Serialize(song))!;
            addEditDialogVisible = true;            
        }        
    }

    private async Task Save()
    {
        isSubmitting = true;
        var content = new StringContent(JsonSerializer.Serialize(song), System.Text.Encoding.UTF8, "application/json");
        HttpResponseMessage response;
        if (song.Id == null)
            response = await HttpClient.PostAsync("/api/Song", content);
        else
            response = await HttpClient.PutAsync("/api/Song", content);

        isSubmitting = false;

        if (response.IsSuccessStatusCode)
        {
            addEditDialogVisible = false;
            SnackBar.Add("Song successfully saved.", Severity.Success);            
            await table.ReloadServerData();
        }
        else
        {
            SnackBar.Add("Failed to save song.", Severity.Error);
        }

    }

    private async void Delete(SongModel s)
    {
        if (s.Id == null) return;

        delMessageBox.Title = $"Delete | " + string.Concat($"{s.Title} - {s.Artist}".Take(25)) + "...";

        var result = await delMessageBox.Show();
        if (result == true)
        {
            var response = await HttpClient.DeleteAsync($"/api/Song/{s.Id}");
            if (response.IsSuccessStatusCode)
            {
                SnackBar.Add("Song deleted.", Severity.Error);
                await table.ReloadServerData();
            }
            else
            {
                SnackBar.Add("Failed to delete song.", Severity.Warning);
            }

        }
    }

    private class SongDTO
    {
        public int pageNumber { get; set; }
        public int pageSize { get; set; }
        public int totalItemCount { get; set; }
        public int totalPageCount { get; set; }
        public List<SongModel> items { get; set; }
    }

    private class SongModel
    {
        public int? Id { get; set; } = null;
        [Required(ErrorMessage = "Title is required")]
        [MinLength(3, ErrorMessage = "At least 3 character.")]
        public string Title { get; set; }
        public string Artist { get; set; }
        public string Duration { get; set; }
        public int PeakChartPosition { get; set; }
        public int ReleaseYear { get; set; }
        public string RecordLabel { get; set; }
        public string Genre { get; set; }
    }
}
